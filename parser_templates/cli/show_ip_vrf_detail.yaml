---

- name: show_ip_vrf_detail
  parser_metadata:
    version: 1.0
    command: show ip vrf detail
    network_os: ios

- name: match vrf sections
  register: sections
  pattern_match:
    regex: "^VRF \\S+; default RD"
    match_all: true
    match_greedy: true

- name: match vrf values
  loop: "{{ sections }}"
  register: vrfs
  pattern_group:

    - name: match name
      pattern_match:
        regex: "^VRF (\\S+); default RD"
        content: "{{ item }}"
      register: name

    - name: match description
      pattern_match:
        regex: "^  Description: (.*)\\n"
        content: "{{ item }}"
      register: description

    - name: match route distinguisher
      pattern_match:
        regex: ".*; default RD (\\d+:\\d+)"
        content: "{{ item }}"
      register: rd

    - name: match export route target section
      pattern_match:
        regex: "^  Export VPN route-target communities\\n(.*\\s+.*\\s+)^  Import VPN"
        content: "{{ item }}"
        match_all: true
        match_greedy: false
      register: export_rt_section

- name: match export route targets
  loop: "{{ vrfs }}"
  loop_control:
    loop_var: route_target_list
  register: vrfs_export_rt
  pattern_group:

    - name: match route targets
      pattern_match:
        regex: "\\s+RT:(\\d+:\\d+)"
        content: "{{ route_target_list.export_rt_section.0.matches }}"
        match_all: true
      register: export_rt

    - name: match vrf name
      pattern_match:
        regex: "(.*)"
        content: "{{ route_target_list.name.matches.0 }}"
        match_greedy: true
      register: name

- name: build a new dict
  register: vrf_export_route_targets
  export_as: dict
  loop: "{{ vrfs_export_rt }}"
  loop_control:
    loop_var: vrf_loop
  json_template:
    template:
      - key: "{{ vrf_loop.name.0 }}"
        elements: "{{ nested_item.matches }}"
        repeat_for: "{{ vrf_loop.export_rt }}"
        repeat_var: nested_item

- name: combine all vrfs
  set_vars:
    combined_dict: "{{ ({}| combine(*vrf_export_route_targets)) }}"

- name: template entries
  register: ip_vrf_detail
  loop: "{{ vrfs }}"
  export: true
  export_as: dict
  extend: cisco_ios
  json_template:
    template:
      - key: "{{ item.name.matches.0 }}"
        object:
          - key: name
            value: "{{ item.name.matches.0 }}"
          - key: description
            value: "{{ item.description.matches.0 }}"
          - key: rd
            value: "{{ item.rd.matches.0 }}"
          - key: export_rt
            value: "{{ combined_dict[item.name.matches.0] }}"
