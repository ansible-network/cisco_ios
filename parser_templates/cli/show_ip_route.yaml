---
- name: show_ip_route_vrf_all
  parser_metadata:
    version: 1.0
    command: "show ip route"
    network_os: ios

# Caveat: This parser only returns the first next hop, for prefixes with multiple possible destinations.

- name: match routes
  register: routes
  pattern_match:
    regex: "^(?P<prot>L|C|S|R|M|B|D|EX|O|i|U|o|P|H|l|a)(?P<default>\\*|).*\\s(?P<prefix>\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})(?P<mask>|\\/\\d{,2})(?P<source> is directly connected, (?P<next_hop_int>\\S+$)| is a summary, \\S+, (?P<next_hop_int_sum>\\S+$)|(\\s+.*via (?P<next_hop_nbr>\\S+), .*))"
    match_all: true

- name: template routing_table
  register: routing_table
  extend: cisco_ios.vrf.DEFAULT
  export: True
  export_as: dict
  loop: "{{ routes }}"
  json_template:
    template:
      - key: "{{ item.prefix }}{{ item.mask }}"
        object:
          - key: prefix
            value: "{{ item.prefix }}"
          - key: mask
            value: "{{ item.mask }}"
          - key: next_hop
            value: "{{ ([nested_item.next_hop_nbr]+[nested_item.next_hop_int, nested_item.next_hop_int_sum]) | reject('equalto', '') | list }}"
          - key: protocol
            value: "{{ item.prot | expand_routing_protocol_name }}"
          - key: default
            value: "
            {%- if item.default == '*' -%} 
            {{ 'True' | string }}
            {%- else -%}
            {{ 'False' | string }}
            {%- endif -%}"